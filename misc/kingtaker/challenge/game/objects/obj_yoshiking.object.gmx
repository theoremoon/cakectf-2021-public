<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yoshiking_walk_left</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 1.0 / 10.0;

is_frozen = false;
is_moving = false;
is_carrying = false;
target_x = 0;
target_y = 0;
box = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_success, 3, false);
global.status = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!is_moving) {
    if (!is_frozen) {
        if (keyboard_check(vk_up)) {
            is_moving = true;
            dx = 0; dy = -32;
        } else if (keyboard_check(vk_down)) {
            is_moving = true;
            dx = 0; dy = 32;
        } else if (keyboard_check(vk_left)) {
            is_moving = true;
            dx = -32; dy = 0;
            sprite_index = spr_yoshiking_walk_left;
        } else if (keyboard_check(vk_right)) {
            is_moving = true;
            dx = 32; dy = 0;
            sprite_index = spr_yoshiking_walk_right;
        }
    
        if (is_moving) {
            target_x = x + dx; target_y = y + dy;
            if (position_meeting(target_x, target_y, obj_wall)) {
                is_moving = false;
            }
            if (position_meeting(target_x, target_y, obj_box)) {
                if (position_meeting(target_x+dx, target_y+dy, obj_wall)
                    || position_meeting(target_x+dx, target_y+dy, obj_box)) {
                    is_moving = false;
                } else {
                    box = instance_place(target_x, target_y, obj_box);
                    is_carrying = true;
                    with (box) {
                        target_x = other.target_x + other.dx;
                        target_y = other.target_y + other.dy;
                    }
                }
            }
        }
        
        if (is_moving) {
            audio_play_sound(snd_move, 1, false);
        }
    }
} else {
    if (point_distance(x, y, target_x, target_y) &gt; 5) {
        move_towards_point(target_x, target_y, 10);
        if (is_carrying) {
            with (box) {
                move_towards_point(target_x, target_y, 10);
            }
        }
    } else {
        x = target_x;
        y = target_y;
        speed = 0;
        is_moving = false;
        if (is_carrying) {
            with (box) {
                x = target_x;
                y = target_y;
                speed = 0;
            }
            is_carrying = false;
            global.counter--;
        }
        global.counter--;
    }
}

if (!is_frozen &amp;&amp; global.counter == 0 &amp;&amp; global.status == 0) {
    if (!place_meeting(x, y, obj_crown)) {
        global.status = -1;
        is_frozen = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (position_meeting(x, y, obj_wall) || position_meeting(x, y, obj_box)) {
    global.reason = "Impossible collision detected";
    room_goto(ban);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_crown">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_item, 2, false);
with(other) {
    instance_destroy();
}
if (instance_number(obj_crown) == 0) {
    is_frozen = true;
    alarm[0] = 10;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
